package chunk_test

import (
	"bytes"
	"encoding/hex"
	"io"
	"testing"

	"github.com/tombell/saga/serato/chunk"
)

func TestNewAdatChunk(t *testing.T) {
	data, _ := hex.DecodeString
	buf := bytes.NewBuffer(data)

	hdr, err := chunk.NewHeader(buf)
	if err != nil {
		t.Error("expected NewHeader err to be nil")
	}

	adat, err := chunk.NewAdatChunk(hdr, buf)
	if err != nil {
		t.Error("expected NewAdatChunk err to be nil")
	}

	if adat == nil {
		t.Error("expected adat to not be nil")
	}
}

func TestNewAdatChunkUnexpectedEOF(t *testing.T) {
	data, _ := hex.DecodeString("61646174000002870000000100000004000000D400000002000000")
	buf := bytes.NewBuffer(data)

	hdr, err := chunk.NewHeader(buf)
	if err != nil {
		t.Error("expected NewHeader err to be nil")
	}

	_, err = chunk.NewAdatChunk(hdr, buf)
	if err != io.ErrUnexpectedEOF {
		t.Error("expected NewAdatChunk err to be ErrUnexpectedEOF")
	}
}

func TestAdatHeader(t *testing.T) {
	data, _ := hex.DecodeString
	buf := bytes.NewBuffer(data)

	hdr, err := chunk.NewHeader(buf)
	if err != nil {
		t.Error("expected NewHeader err to be nil")
	}

	adat, err := chunk.NewAdatChunk(hdr, buf)
	if err != nil {
		t.Error("expected NewAdatChunk err to be nil")
	}

	if adat.Header() != hdr {
		t.Error("expected header to be the same")
	}
}

func TestAdatType(t *testing.T) {
	data, _ := hex.DecodeString
	buf := bytes.NewBuffer(data)

	hdr, err := chunk.NewHeader(buf)
	if err != nil {
		t.Error("expected NewHeader err to be nil")
	}

	adat, err := chunk.NewAdatChunk(hdr, buf)
	if err != nil {
		t.Error("expected NewAdatChunk err to be nil")
	}

	actual := adat.Type()
	expected := "adat"

	if actual != expected {
		t.Errorf("expected type to be %s, got %s", expected, actual)
	}
}
